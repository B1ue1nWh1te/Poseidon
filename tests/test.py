from Poseidon.Blockchain import *

BlockchainUtils.SwitchSolidityVersion("0.8.0")
abi, byteCode = BlockchainUtils.Compile("test.sol", "Test")
print(f"{abi}\n{byteCode}")
newAccount = BlockchainUtils.CreateNewAccount()
print(newAccount)

chain = Chain("https://ropsten.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161")
chain.GetBlockInformation("earliest")
balance = chain.GetBalance(newAccount[0])
print(balance)
input("此处暂停以向测试账户转一些测试ETH作为后续gas费 完成后回车即可")

account = Account(chain, newAccount[1])
temp = account.SignMessage("test")
print(temp)
signer = BlockchainUtils.RecoverMessage("test", temp["SignedMessageSignature"])
print(signer)
signer = BlockchainUtils.RecoverMessageByHash(temp["SignedMessageHash"], temp["SignedMessageSignature"])
print(signer)

temp = account.SendTransaction("0x000000000000000000000000000000000000dEaD", "0x", 1, 21000)
print(temp)
print(chain.GetTransactionByHash(temp["TransactionHash"]))
print(chain.GetTransactionByBlockIdAndIndex("latest", 0))
temp = account.SendTransactionByEIP1559("0x000000000000000000000000000000000000dEaD", "0x", 1, 21000)
print(temp)

temp = account.DeployContract(abi, byteCode, 0, "test", 0x42)
print(temp)
print(chain.GetCode(temp["ContractAddress"]))
print(chain.GetStorage(temp["ContractAddress"], 0))
print(chain.DumpStorage(temp["ContractAddress"], 2))

temp = account.DeployContractByEIP1559(abi, byteCode, 0, "test", 0x42)
print(temp)
contract = temp["Contract"]
print(contract.CallFunction("change_s", "test2"))
print(contract.CallFunction("change_i", 43))
print(chain.DumpStorage(temp["ContractAddress"], 2))
print(contract.CallFunctionByEIP1559("change_s", "test3"))
print(contract.CallFunctionByEIP1559("change_i", 44))
print(chain.DumpStorage(temp["ContractAddress"], 2))
print(contract.ReadOnlyCallFunction("i"))
print(contract.EncodeABI("change_s", "test5"))
